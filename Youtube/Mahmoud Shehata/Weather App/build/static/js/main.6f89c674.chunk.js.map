{"version":3,"sources":["Components/WeatherCard/Location.js","Components/WeatherCard/Icon.js","Components/WeatherCard/Condition.js","Components/WeatherCard/Component.js","Components/Loader.js","Components/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","Container","styled","div","City","Country","Icon","props","icon","img","condition","className","src","alt","Condition","temp","Temp","h1","State","h3","WeatherCard","highColor","lowColor","bg","Card","Loader","WeatherEngine","query","useState","loading","setLoading","error","setError","weather","setWeather","getWeather","q","a","target","slice","toUpperCase","fetch","apiRes","json","resJSON","name","sys","main","useEffect","defaultLocation","WeatherEng","onClick","value","onChange","e","preventDefault","handleSearch","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6f89c674.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Location = ({ city, country }) => {\r\n  const Container = styled.div`\r\n    text-align: center;\r\n  `;\r\n  const City = styled.div`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1.6rem;\r\n  `;\r\n  const Country = styled.div`\r\n    font-family: \"Fira Sans\", sans-serif;\r\n    font-size: 1.1rem;\r\n  `;\r\n  return (\r\n    <Container>\r\n      <City>{city}</City>\r\n      <Country>{country}</Country>\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Icon = (props) => {\r\n  let icon;\r\n  let Icon = styled.img`\r\n    width: 40%;\r\n  `;\r\n  \r\n  switch (props.condition) {\r\n    case \"Clouds\":\r\n      icon = `./img/Weather Icons/Mostly Cloudy-2x.png`;\r\n      break;\r\n    case \"Clear\":\r\n      icon = `./img/Weather Icons/Mostly Sunny-2x.png`;\r\n      break;\r\n    case \"Haze\":\r\n      icon = `./img/Weather Icons/Haze-2x.png`;\r\n      break;\r\n    case \"Hail\":\r\n      icon = `./img/Weather Icons/Hail-2x.png`;\r\n      break;\r\n    case \"Fog\":\r\n      icon = `./img/Weather Icons/Fog-2x.png`;\r\n      break;\r\n    case \"Tornado\":\r\n      icon = `./img/Weather Icons/Tornado-2x.png`;\r\n      break;\r\n    case \"Dust\":\r\n      icon = `./img/Weather Icons/Dust-2x.png`;\r\n      break;\r\n    case \"Mist\":\r\n      icon = `./img/Weather Icons/Fog-2x.png`;\r\n      break;\r\n    case \"Snow\":\r\n      icon = `./img/Weather Icons/Snow-2x.png`;\r\n      break;\r\n    case \"Rain\":\r\n      icon = `./img/Weather Icons/Rain-2x.png`;\r\n      break;\r\n    case \"Drizzle\":\r\n      icon = `./img/Weather Icons/Drizzle-2x.png`;\r\n      break;\r\n    case \"Thunderstorm\":\r\n      icon = `./img/Weather Icons/Severe Thunderstorm-2x.png`;\r\n      break;\r\n    default:\r\n      icon = `./img/Weather Icons/Fog-2x.png`;\r\n      break;\r\n  }\r\n\r\n  return <Icon className=\"icon\" src={icon} alt=\"Weather Icon\" />;\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Condition = ({ temp, condition }) => {\r\n  const Temp = styled.h1`\r\n    font-family: \"Fira Sans\", sans-serif;\r\n    font-size: 2rem;\r\n    font-weight: 200;\r\n    text-align: center;\r\n  `;\r\n  const State = styled.h3`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1.2rem;\r\n    text-align: center;\r\n  `;\r\n  return (\r\n    <div>\r\n      <Temp>{ temp }Â°C</Temp>\r\n      <State>{condition}</State>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Condition;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Location from \"./Location.js\";\r\nimport Icon from \"./Icon.js\";\r\nimport Condition from \"./Condition.js\";\r\n\r\nconst WeatherCard = ({ temp, condition, city, country }) => {\r\n  let highColor, lowColor, bg;\r\n\r\n  if (temp > 12) {\r\n    highColor = (1 - (temp - 12) / 28) * 255;\r\n    lowColor = highColor - 150;\r\n    bg = `\r\n      rgb(255, ${highColor}, 0),\r\n      rgb(255, ${lowColor}, 0)`;\r\n  } else if (temp <= 12) {\r\n    highColor = (1 - (temp + 20) / 32) * 255;\r\n    lowColor = highColor - 150;\r\n    bg = `\r\n      rgb(0, ${highColor}, 255),\r\n      rgb(0, ${lowColor}, 255)`;\r\n  }\r\n\r\n  const Card = styled.div`\r\n    color: white;\r\n    margin: 0 auto;\r\n    background: linear-gradient(to top, ${bg});\r\n    width: 12.5rem;\r\n    height: 15rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border-radius: 15px;\r\n  `;\r\n  return (\r\n    <Card>\r\n      <Location city={city} country={country} />\r\n      <Icon condition={condition} />\r\n      <Condition temp={temp} condition={condition} />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from 'react';\r\n\r\nfunction Loader() {\r\n\treturn (\r\n\t\t<div className=\"flex justify-center\">\r\n\t\t\t<div className=\"loader\"></div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Loader;","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport WeatherCard from \"./WeatherCard/Component.js\";\r\nimport Loader from './Loader.js'\r\n\r\nfunction WeatherEngine(props) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  let query;//const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({\r\n    city: null,\r\n    country: null,\r\n    condition: null,\r\n    temp: null\r\n  })\r\n  const getWeather = async q => {\r\n    //setQuery(\"\");\r\n    query = \"\";\r\n    setLoading(true);\r\n    try {\r\n        let target = q.slice(0,1).toUpperCase() + q.slice(1);\r\n        const apiRes = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/weather?q=${target}&units=metric&APPID=a957f14e3c54881472646d30636a4a83`);\r\n        const resJSON = await apiRes.json();\r\n        setWeather({\r\n            city: resJSON.name,\r\n            country: resJSON.sys.country,\r\n            condition: resJSON.weather[0].main,\r\n            temp: resJSON.main.temp\r\n        });\r\n    } catch (e) {\r\n        setError(true);\r\n    }\r\n    setLoading(false);  \r\n  }\r\n  \r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    getWeather(query);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getWeather(props.defaultLocation);\r\n  }, [props.defaultLocation])\r\n  \r\n  const WeatherEng = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-direction: column;\r\n    width: 12.5rem;\r\n    align-items: center;\r\n  `;\r\n\r\n  return (\r\n    <div>{\r\n        (!loading && !error) ? (\r\n            <WeatherEng>\r\n            <WeatherCard temp={weather.temp} condition={weather.condition} city={weather.city} country={weather.country} />\r\n            <form>\r\n                <input value={ query } onChange={  e => query = e.target.value } />\r\n                <button onClick={ e => handleSearch(e) } >Search</button>\r\n            </form>\r\n            </WeatherEng>\r\n        ) : loading ? (\r\n            <Loader />\r\n        ) : (!loading && error) ? (\r\n            <div>\r\n                There has been an error!\r\n                <button onClick={ () => setError(false)}>Reset?</button>\r\n            </div>\r\n        ) : null\r\n    }</div>\r\n  );\r\n}// e => setQuery(e.target.value) \r\n\r\nexport default WeatherEngine;\r\n","import React from \"react\";\r\nimport WeatherEngine from \"./Components/WeatherEngine.js\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <WeatherEngine defaultLocation=\"Cairo,eg\" />\r\n      <WeatherEngine defaultLocation=\"sydney,au\" />\r\n      <WeatherEngine defaultLocation=\"washington,us\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./tailwind.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}